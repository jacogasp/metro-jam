name: CI
env:
  TARGET_NAME: CoreGame
  CPM_SOURCE_CACHE: ${{ github.workspace }}/.cache/CPM
  CCACHE_DIR: ${{ github.workspace }}/.cache/ccache
  ARTIFACT_LINUX: libCoreGame.so
  ARTIFACT_MACOS: libCoreGame.dylib
  ARTIFACT_WINDOWS: libCoreGame.dll
  GODOT_VERSION: 4.0.3

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        config:
          - name: Ubuntu
            os: ubuntu-latest
            cmake_preset: ci-linux
            build_dir: build/linux
          - name: macOS
            os: macos-11
            cmake_preset: ci-macos
            build_dir: build/macos
          - name: Windows
            os: windows-latest
            cmake_preset: ci-windows
            build_dir: build/windows

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Prerequisites
        id: deps
        run: |
          case $RUNNER_OS in
          Linux)
            sudo apt update && sudo apt install ccache
            artifact=${ARTIFACT_LINUX}
            ;;
          macOS)
            brew install ccache
            artifact=${ARTIFACT_MACOS}
            ;;
          Windows)
            choco install ccache
            artifact=${ARTIFACT_WINDOWS}
            ;;
          *)
            cpus=1
            ;;
          esac
          echo "artifact=${artifact}" >> $GITHUB_OUTPUT

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CPM_SOURCE_CACHE }}
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}

      - name: Cmake configure
        run: cmake --preset ${{ matrix.config.cmake_preset }}

      - name: Build CoreGame
        id: configure
        run: cmake --build --preset ${{ matrix.config.cmake_preset }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.deps.outputs.artifact }}
          path: ${{ matrix.config.build_dir }}/${{ steps.deps.outputs.artifact }}

  export:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        config:
          - name: Export macOS
            os: macos-latest
            export_preset: macOS
            build_dir: build/macos
            dist_dir: dist/macos
            executable: MetroidvaniaSuperJam.dmg
          - name: Export Windows
            os: windows-latest
            export_preset: Windows
            build_dir: build/windows
            dist_dir: dist/windows
            executable: MetroidvaniaSuperJam.exe
    needs:
      - build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Godot and Godot Templates
        id: godot-install
        run: |
          mkdir dist
          case $RUNNER_OS in
          Linux)
            sudo apt update && sudo apt install -y wget unzip
            artifact=${ARTIFACT_LINUX}
            ;;
          macOS)
            brew install wget unzip coreutils
            echo "Downloading Godot ${GODOT_VERSION}"
            wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_macos.universal.zip
            unzip Godot_v${GODOT_VERSION}-stable_macos.universal.zip
            mv Godot.app /Applications
            ln -s /Applications/Godot.app/Contents/MacOS/Godot /usr/local/bin/godot
            echo "Downloading Export Templates for Godot ${GODOT_VERSION}"
            wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
            unzip Godot_v${GODOT_VERSION}-stable_export_templates.tpz
            mkdir -p ~/Library/Application\ Support/Godot/export_templates/${GODOT_VERSION}.stable
            mv templates/macos.zip ~/Library/Application\ Support/Godot/export_templates/${GODOT_VERSION}.stable
            rm -rf templates
            artifact=${ARTIFACT_MACOS}
            ;;
          Windows)
            choco install wget unzip
            echo "Downloading Godot ${GODOT_VERSION}"
            wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_win64.exe.zip
            unzip Godot_v${GODOT_VERSION}-stable_win64.exe.zip
            mv Godot_v${GODOT_VERSION}-stable_win64.exe /c/Windows/godot.exe
            echo "Downloading Export Templates for Godot ${GODOT_VERSION}"
            wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
            unzip Godot_v${GODOT_VERSION}-stable_export_templates.tpz
            mkdir -p $APPDATA/Godot/export_templates/${GODOT_VERSION}.stable
            mv templates/windows_* $APPDATA/Godot/export_templates/${GODOT_VERSION}.stable/
            rm -rf templates
            echo "Download rcedit"
            wget -q https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe
            mv rcedit-x64.exe /c/Windows
            cp .github/workflows/editor_settings-4.tres $APPDATA/Godot/
            artifact=${ARTIFACT_WINDOWS}
            ;;
          *)
            echo Unknown OS
            ;;
          esac
          
          echo "artifact=${artifact}" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.godot-install.outputs.artifact }}
          path: ${{ matrix.config.build_dir }}

      - name: Export
        run: |
          mkdir ${{ matrix.config.dist_dir }}
          timeout 180 godot --headless --quit --export-release ${{ matrix.config.export_preset }}
          ls -lah ${{ matrix.config.dist_dir }}

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.executable }}
          path: |
            ${{ matrix.config.dist_dir }}/${{ matrix.config.executable }}
            ${{ matrix.config.dist_dir }}/${{ env.ARTIFACT_WINDOWS }}
on:
  workflow_dispatch:
  push:
    paths:
      - src/**
      - .github/**
      - CMakeLists.txt
      - CMakePresets.json
      - extension_api.json
